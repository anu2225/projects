package com.cognizant.smarthotelbooking.service.impl;

import com.cognizant.smarthotelbooking.dto.responsedto.UserResponseDTO;
import com.cognizant.smarthotelbooking.entity.User;
import com.cognizant.smarthotelbooking.entity.enums.Role;
import com.cognizant.smarthotelbooking.repository.UserRepository;
import com.cognizant.smarthotelbooking.service.UserService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class UserServiceImplTest {

    @Mock
    private UserRepository userRepository;

    @InjectMocks
    private UserServiceImpl userService;  // testing real service with mock repo

    private User user1;
    private User user2;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);

        // जर entity मध्ये AllArgsConstructor असेल तर हे चालेल:
        user1 = new User(1L, "Test User 1", "test1@example.com", "9876543210", Role.USER);
        user2 = new User(2L, "Test User 2", "test2@example.com", "8765432109", Role.ADMIN);

        // जर फक्त NoArgsConstructor असेल तर असे कर:
        /*
        user1 = new User();
        user1.setId(1L);
        user1.setName("Test User 1");
        user1.setEmail("test1@example.com");
        user1.setContactNumber("9876543210");
        user1.setRole(Role.USER);

        user2 = new User();
        user2.setId(2L);
        user2.setName("Test User 2");
        user2.setEmail("test2@example.com");
        user2.setContactNumber("8765432109");
        user2.setRole(Role.ADMIN);
        */
    }

    @Test
    void testGetAllUsers() {
        when(userRepository.findAll()).thenReturn(Arrays.asList(user1, user2));

        List<UserResponseDTO> users = userService.getAllUsers();

        assertNotNull(users);
        assertEquals(2, users.size());
        assertEquals("Test User 1", users.get(0).getName());

        verify(userRepository, times(1)).findAll();
    }

    @Test
    void testGetUserById_Found() {
        when(userRepository.findById(1L)).thenReturn(Optional.of(user1));

        UserResponseDTO user = userService.getUserById(1L);

        assertNotNull(user);
        assertEquals("Test User 1", user.getName());
        assertEquals("test1@example.com", user.getEmail());

        verify(userRepository, times(1)).findById(1L);
    }

    @Test
    void testGetUserById_NotFound() {
        when(userRepository.findById(99L)).thenReturn(Optional.empty());

        UserResponseDTO user = userService.getUserById(99L);

        assertNull(user);  // service impl मध्ये null return होतं

        verify(userRepository, times(1)).findById(99L);
    }
}
