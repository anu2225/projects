package com.cognizant.smarthotelbooking.service;

import com.cognizant.smarthotelbooking.dto.requestdto.RoomRequestDTO;
import com.cognizant.smarthotelbooking.dto.responsedto.RoomResponseDTO;
import com.cognizant.smarthotelbooking.entity.Room;
import com.cognizant.smarthotelbooking.exception.RoomNotFoundException;
import com.cognizant.smarthotelbooking.repository.RoomRepository;
import com.cognizant.smarthotelbooking.service.impl.RoomServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class RoomServiceTest {

    @Mock
    private RoomRepository roomRepository;

    @InjectMocks
    private RoomServiceImpl roomService;

    private Room room;
    private RoomRequestDTO roomRequestDTO;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);

        // Room entity
        room = new Room();
        room.setRoomId(1L);
        room.setType("Deluxe");
        room.setPrice(2500.0);
        room.setAvailability(true);
        room.setFeatures("Sea view, AC, WiFi");
        room.setHotelId(10L);

        // RoomRequestDTO
        roomRequestDTO = new RoomRequestDTO();
        roomRequestDTO.setType("Deluxe");
        roomRequestDTO.setPrice(2500.0);
        roomRequestDTO.setAvailability(true);
        roomRequestDTO.setFeatures("Sea view, AC, WiFi");
        roomRequestDTO.setHotelId(10L);
    }

    @Test
    void testCreateRoom() {
        when(roomRepository.save(any(Room.class))).thenReturn(room);

        RoomResponseDTO response = roomService.createRoom(roomRequestDTO);

        assertNotNull(response);
        assertEquals("Deluxe", response.getType());
        assertEquals(2500.0, response.getPrice());
        verify(roomRepository, times(1)).save(any(Room.class));
    }

    @Test
    void testGetRoomById_Found() {
        when(roomRepository.findById(1L)).thenReturn(Optional.of(room));

        RoomResponseDTO response = roomService.getRoomById(1L);

        assertNotNull(response);
        assertEquals("Deluxe", response.getType());
        assertTrue(response.isAvailability());
    }

    @Test
    void testGetRoomById_NotFound() {
        when(roomRepository.findById(1L)).thenReturn(Optional.empty());

        assertThrows(RoomNotFoundException.class, () -> roomService.getRoomById(1L));
    }

    @Test
    void testGetAllRooms() {
        when(roomRepository.findAll()).thenReturn(Arrays.asList(room));

        List<RoomResponseDTO> rooms = roomService.getAllRooms();

        assertEquals(1, rooms.size());
        assertEquals("Deluxe", rooms.get(0).getType());
    }

    @Test
    void testUpdateRoom() {
        when(roomRepository.findById(1L)).thenReturn(Optional.of(room));
        when(roomRepository.save(any(Room.class))).thenReturn(room);

        RoomResponseDTO updated = roomService.updateRoom(1L, roomRequestDTO);

        assertEquals("Deluxe", updated.getType());
        assertEquals(2500.0, updated.getPrice());
    }

    @Test
    void testDeleteRoom() {
        when(roomRepository.findById(1L)).thenReturn(Optional.of(room));

        roomService.deleteRoom(1L);

        verify(roomRepository, times(1)).delete(room);
    }
}
