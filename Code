package com.cognizant.smarthotelbooking.service.impl;

import com.cognizant.smarthotelbooking.dto.responsedto.UserResponseDTO;
import com.cognizant.smarthotelbooking.entity.User;
import com.cognizant.smarthotelbooking.entity.enums.Role;
import com.cognizant.smarthotelbooking.repository.UserRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class UserServiceImplTest {

    @Mock
    private UserRepository userRepository;

    @InjectMocks
    private UserServiceImpl userService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetAllUsers() {
        User user = new User(1L, "Test User", "test@example.com", "9876543210", Role.USER);

        when(userRepository.findAll()).thenReturn(Arrays.asList(user));

        List<UserResponseDTO> result = userService.getAllUsers();

        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals("Test User", result.get(0).getName());
        assertEquals("9876543210", result.get(0).getContactNumber());

        verify(userRepository, times(1)).findAll();
    }

    @Test
    void testGetUserById_Found() {
        User user = new User(1L, "Test User", "test@example.com", "9876543210", Role.USER);

        when(userRepository.findById(1L)).thenReturn(Optional.of(user));

        UserResponseDTO result = userService.getUserById(1L);

        assertNotNull(result);
        assertEquals("Test User", result.getName());
        assertEquals("test@example.com", result.getEmail());

        verify(userRepository, times(1)).findById(1L);
    }

    @Test
    void testGetUserById_NotFound() {
        when(userRepository.findById(1L)).thenReturn(Optional.empty());

        UserResponseDTO result = userService.getUserById(1L);

        assertNull(result);

        verify(userRepository, times(1)).findById(1L);
    }
}


package com.cognizant.smarthotelbooking.controller;

import com.cognizant.smarthotelbooking.dto.responsedto.UserResponseDTO;
import com.cognizant.smarthotelbooking.entity.enums.Role;
import com.cognizant.smarthotelbooking.service.UserService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class UserControllerTest {

    @Mock
    private UserService userService;

    @InjectMocks
    private UserController userController;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetAllUsers() {
        UserResponseDTO user = new UserResponseDTO(1L, "Test User", "test@example.com", "9876543210", Role.USER);

        when(userService.getAllUsers()).thenReturn(Arrays.asList(user));

        ResponseEntity<List<UserResponseDTO>> response = userController.getAllUsers();

        assertNotNull(response);
        assertEquals(200, response.getStatusCodeValue());
        assertEquals(1, response.getBody().size());
        assertEquals("Test User", response.getBody().get(0).getName());

        verify(userService, times(1)).getAllUsers();
    }

    @Test
    void testGetUserById_Found() {
        UserResponseDTO user = new UserResponseDTO(1L, "Test User", "test@example.com", "9876543210", Role.USER);

        when(userService.getUserById(1L)).thenReturn(user);

        ResponseEntity<UserResponseDTO> response = userController.getUserById(1L);

        assertNotNull(response);
        assertEquals(200, response.getStatusCodeValue());
        assertEquals("Test User", response.getBody().getName());

        verify(userService, times(1)).getUserById(1L);
    }

    @Test
    void testGetUserById_NotFound() {
        when(userService.getUserById(1L)).thenReturn(null);

        ResponseEntity<UserResponseDTO> response = userController.getUserById(1L);

        assertNotNull(response);
        assertEquals(404, response.getStatusCodeValue());

        verify(userService, times(1)).getUserById(1L);
    }
}





package com.cognizant.smarthotelbooking.controller;

import com.cognizant.smarthotelbooking.dto.responsedto.UserResponseDTO;
import com.cognizant.smarthotelbooking.entity.enums.Role;
import com.cognizant.smarthotelbooking.service.UserService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class UserControllerTest {

    @Mock
    private UserService userService;

    @InjectMocks
    private UserController userController;

    private UserResponseDTO user1;
    private UserResponseDTO user2;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);

        user1 = new UserResponseDTO(
                1L,
                "Test User 1",
                "test1@example.com",
                Role.USER,
                "9876543210"
        );

        user2 = new UserResponseDTO(
                2L,
                "Test User 2",
                "test2@example.com",
                Role.ADMIN,
                "8765432109"
        );
    }

    @Test
    void testGetAllUsers() {
        List<UserResponseDTO> mockUsers = Arrays.asList(user1, user2);

        when(userService.getAllUsers()).thenReturn(mockUsers);

        ResponseEntity<List<UserResponseDTO>> response = userController.getAllUsers();

        assertNotNull(response);
        assertEquals(2, response.getBody().size());
        assertEquals("Test User 1", response.getBody().get(0).getName());

        verify(userService, times(1)).getAllUsers();
    }

    @Test
    void testGetUserById_Found() {
        when(userService.getUserById(1L)).thenReturn(user1);

        ResponseEntity<UserResponseDTO> response = userController.getUserById(1L);

        assertNotNull(response);
        assertEquals(200, response.getStatusCodeValue());
        assertEquals("Test User 1", response.getBody().getName());

        verify(userService, times(1)).getUserById(1L);
    }

    @Test
    void testGetUserById_NotFound() {
        when(userService.getUserById(99L)).thenReturn(null);

        ResponseEntity<UserResponseDTO> response = userController.getUserById(99L);

        assertNotNull(response);
        assertEquals(404, response.getStatusCodeValue());

        verify(userService, times(1)).getUserById(99L);
    }
}


