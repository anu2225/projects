package com.cognizant.smarthotelbooking.service;

import com.cognizant.smarthotelbooking.dto.requestdto.RoomRequestDTO;
import com.cognizant.smarthotelbooking.dto.responsedto.RoomResponseDTO;
import com.cognizant.smarthotelbooking.service.impl.RoomServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.when;

class RoomServiceTest {

    @InjectMocks
    private RoomServiceImpl roomService;

    @Mock
    private RoomRepository roomRepository; // जर तुझ्या serviceImpl मध्ये असेल तर

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetAllRooms() {
        RoomResponseDTO r1 = new RoomResponseDTO();
        r1.setRoomId(1L);
        r1.setRoomType("Deluxe");
        r1.setPricePerNight(5000.0);
        r1.setAvailability(true);
        r1.setHotelId(1L);

        RoomResponseDTO r2 = new RoomResponseDTO();
        r2.setRoomId(2L);
        r2.setRoomType("Suite");
        r2.setPricePerNight(10000.0);
        r2.setAvailability(false);
        r2.setHotelId(1L);

        when(roomService.getAllRooms()).thenReturn(Arrays.asList(r1, r2));

        List<RoomResponseDTO> result = roomService.getAllRooms();
        assertEquals(2, result.size());
        assertEquals("Deluxe", result.get(0).getRoomType());
    }

    @Test
    void testGetRoomById() {
        RoomResponseDTO r = new RoomResponseDTO();
        r.setRoomId(1L);
        r.setRoomType("Deluxe");
        r.setPricePerNight(5000.0);
        r.setAvailability(true);
        r.setHotelId(1L);

        when(roomService.getRoomById(1L)).thenReturn(r);

        RoomResponseDTO result = roomService.getRoomById(1L);
        assertEquals("Deluxe", result.getRoomType());
    }

    @Test
    void testCreateRoom() {
        RoomRequestDTO req = new RoomRequestDTO();
        req.setRoomType("Deluxe");
        req.setPricePerNight(5000.0);
        req.setAvailability(true);
        req.setHotelId(1L);

        RoomResponseDTO res = new RoomResponseDTO();
        res.setRoomId(1L);
        res.setRoomType("Deluxe");
        res.setPricePerNight(5000.0);
        res.setAvailability(true);
        res.setHotelId(1L);

        when(roomService.createRoom(any(RoomRequestDTO.class))).thenReturn(res);

        RoomResponseDTO result = roomService.createRoom(req);
        assertEquals("Deluxe", result.getRoomType());
    }

    @Test
    void testUpdateRoom() {
        RoomRequestDTO req = new RoomRequestDTO();
        req.setRoomType("Suite");
        req.setPricePerNight(8000.0);
        req.setAvailability(true);
        req.setHotelId(1L);

        RoomResponseDTO res = new RoomResponseDTO();
        res.setRoomId(1L);
        res.setRoomType("Suite");
        res.setPricePerNight(8000.0);
        res.setAvailability(true);
        res.setHotelId(1L);

        when(roomService.updateRoom(eq(1L), any(RoomRequestDTO.class))).thenReturn(res);

        RoomResponseDTO result = roomService.updateRoom(1L, req);
        assertEquals("Suite", result.getRoomType());
    }

    @Test
    void testDeleteRoom() {
        roomService.deleteRoom(1L);
    }
}
