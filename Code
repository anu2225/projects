package com.cognizant.smarthotelbooking.controller;

import com.cognizant.smarthotelbooking.dto.responsedto.HotelResponseDTO;
import com.cognizant.smarthotelbooking.service.HotelService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import java.util.Arrays;
import java.util.List;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

class HotelControllerTest {

    private MockMvc mockMvc;

    @Mock
    private HotelService hotelService;

    @InjectMocks
    private HotelController hotelController;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        mockMvc = MockMvcBuilders.standaloneSetup(hotelController).build();
    }

    @Test
    void testGetAllHotels() throws Exception {
        List<HotelResponseDTO> hotels = Arrays.asList(
                new HotelResponseDTO(1L, "Taj", "Mumbai", "Pool, Spa", 5.0, 101L),
                new HotelResponseDTO(2L, "Oberoi", "Delhi", "Gym, WiFi", 4.5, 102L)
        );

        when(hotelService.getAllHotels()).thenReturn(hotels);

        mockMvc.perform(get("/api/hotels"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.size()").value(2))
                .andExpect(jsonPath("$[0].name").value("Taj"));
    }

    @Test
    void testGetHotelById() throws Exception {
        HotelResponseDTO hotel = new HotelResponseDTO(1L, "Taj", "Mumbai", "Pool, Spa", 5.0, 101L);

        when(hotelService.getHotelById(1L)).thenReturn(hotel);

        mockMvc.perform(get("/api/hotels/1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.name").value("Taj"))
                .andExpect(jsonPath("$.location").value("Mumbai"));
    }

    @Test
    void testCreateHotel() throws Exception {
        HotelResponseDTO createdHotel = new HotelResponseDTO(3L, "Hyatt", "Pune", "Spa, WiFi", 4.2, 103L);

        when(hotelService.createHotel(any())).thenReturn(createdHotel);

        mockMvc.perform(post("/api/hotels")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content("{\"name\":\"Hyatt\",\"location\":\"Pune\",\"amenities\":\"Spa, WiFi\",\"rating\":4.2,\"managerId\":103}"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.name").value("Hyatt"));
    }

    @Test
    void testUpdateHotel() throws Exception {
        HotelResponseDTO updatedHotel = new HotelResponseDTO(1L, "Taj Updated", "Mumbai", "Pool, Spa", 5.0, 101L);

        when(hotelService.updateHotel(eq(1L), any())).thenReturn(updatedHotel);

        mockMvc.perform(put("/api/hotels/1")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content("{\"name\":\"Taj Updated\",\"location\":\"Mumbai\",\"amenities\":\"Pool, Spa\",\"rating\":5.0,\"managerId\":101}"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.name").value("Taj Updated"));
    }

    @Test
    void testDeleteHotel() throws Exception {
        mockMvc.perform(delete("/api/hotels/1"))
                .andExpect(status().isOk());
    }
}

package com.cognizant.smarthotelbooking.service;

import com.cognizant.smarthotelbooking.dto.requestdto.HotelRequestDTO;
import com.cognizant.smarthotelbooking.dto.responsedto.HotelResponseDTO;
import com.cognizant.smarthotelbooking.entity.Hotel;
import com.cognizant.smarthotelbooking.repository.HotelRepository;
import com.cognizant.smarthotelbooking.service.impl.HotelServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

class HotelServiceTest {

    @Mock
    private HotelRepository hotelRepository;

    @InjectMocks
    private HotelServiceImpl hotelService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetAllHotels() {
        List<Hotel> hotels = Arrays.asList(
                new Hotel(1L, "Taj", "Mumbai", "Pool, Spa", 5.0, 101L),
                new Hotel(2L, "Oberoi", "Delhi", "Gym, WiFi", 4.5, 102L)
        );

        when(hotelRepository.findAll()).thenReturn(hotels);

        List<HotelResponseDTO> result = hotelService.getAllHotels();

        assertEquals(2, result.size());
        assertEquals("Taj", result.get(0).getName());
    }

    @Test
    void testGetHotelById() {
        Hotel hotel = new Hotel(1L, "Taj", "Mumbai", "Pool, Spa", 5.0, 101L);

        when(hotelRepository.findById(1L)).thenReturn(Optional.of(hotel));

        HotelResponseDTO result = hotelService.getHotelById(1L);

        assertEquals("Taj", result.getName());
        assertEquals("Mumbai", result.getLocation());
    }

    @Test
    void testCreateHotel() {
        HotelRequestDTO req = new HotelRequestDTO("Hyatt", "Pune", "Spa, WiFi", 4.2, 103L);
        Hotel saved = new Hotel(3L, "Hyatt", "Pune", "Spa, WiFi", 4.2, 103L);

        when(hotelRepository.save(any(Hotel.class))).thenReturn(saved);

        HotelResponseDTO result = hotelService.createHotel(req);

        assertEquals("Hyatt", result.getName());
        assertEquals("Pune", result.getLocation());
    }

    @Test
    void testUpdateHotel() {
        HotelRequestDTO req = new HotelRequestDTO("Taj Updated", "Mumbai", "Pool, Spa", 5.0, 101L);
        Hotel existing = new Hotel(1L, "Taj", "Mumbai", "Pool, Spa", 5.0, 101L);
        Hotel updated = new Hotel(1L, "Taj Updated", "Mumbai", "Pool, Spa", 5.0, 101L);

        when(hotelRepository.findById(1L)).thenReturn(Optional.of(existing));
        when(hotelRepository.save(any(Hotel.class))).thenReturn(updated);

        HotelResponseDTO result = hotelService.updateHotel(1L, req);

        assertEquals("Taj Updated", result.getName());
    }

    @Test
    void testDeleteHotel() {
        hotelService.deleteHotel(1L);
    }
}





package com.cognizant.smarthotelbooking.controller;

import com.cognizant.smarthotelbooking.dto.responsedto.RoomResponseDTO;
import com.cognizant.smarthotelbooking.service.RoomService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import java.util.Arrays;
import java.util.List;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

class RoomControllerTest {

    private MockMvc mockMvc;

    @Mock
    private RoomService roomService;

    @InjectMocks
    private RoomController roomController;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        mockMvc = MockMvcBuilders.standaloneSetup(roomController).build();
    }

    private RoomResponseDTO buildRoom(Long id, String type, double price, boolean available, Long hotelId) {
        RoomResponseDTO dto = new RoomResponseDTO();
        dto.setId(id);
        dto.setType(type);
        dto.setPrice(price);
        dto.setAvailable(available);
        dto.setHotelId(hotelId);
        return dto;
    }

    @Test
    void testGetAllRooms() throws Exception {
        List<RoomResponseDTO> rooms = Arrays.asList(
                buildRoom(1L, "Deluxe", 5000.0, true, 1L),
                buildRoom(2L, "Suite", 8000.0, false, 1L)
        );

        when(roomService.getAllRooms()).thenReturn(rooms);

        mockMvc.perform(get("/api/rooms"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.size()").value(2))
                .andExpect(jsonPath("$[0].type").value("Deluxe"));
    }

    @Test
    void testGetRoomById() throws Exception {
        RoomResponseDTO room = buildRoom(1L, "Deluxe", 5000.0, true, 1L);

        when(roomService.getRoomById(1L)).thenReturn(room);

        mockMvc.perform(get("/api/rooms/1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.type").value("Deluxe"))
                .andExpect(jsonPath("$.price").value(5000.0));
    }

    @Test
    void testCreateRoom() throws Exception {
        RoomResponseDTO createdRoom = buildRoom(3L, "Standard", 3000.0, true, 1L);

        when(roomService.createRoom(any())).thenReturn(createdRoom);

        mockMvc.perform(post("/api/rooms")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content("{\"type\":\"Standard\",\"price\":3000.0,\"available\":true,\"hotelId\":1}"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.type").value("Standard"))
                .andExpect(jsonPath("$.price").value(3000.0));
    }

    @Test
    void testUpdateRoom() throws Exception {
        RoomResponseDTO updatedRoom = buildRoom(1L, "Deluxe Updated", 5500.0, true, 1L);

        when(roomService.updateRoom(eq(1L), any())).thenReturn(updatedRoom);

        mockMvc.perform(put("/api/rooms/1")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content("{\"type\":\"Deluxe Updated\",\"price\":5500.0,\"available\":true,\"hotelId\":1}"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.type").value("Deluxe Updated"));
    }

    @Test
    void testDeleteRoom() throws Exception {
        mockMvc.perform(delete("/api/rooms/1"))
                .andExpect(status().isOk());
    }
}



package com.cognizant.smarthotelbooking.service;

import com.cognizant.smarthotelbooking.dto.requestdto.RoomRequestDTO;
import com.cognizant.smarthotelbooking.dto.responsedto.RoomResponseDTO;
import com.cognizant.smarthotelbooking.service.impl.RoomServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.when;

class RoomServiceTest {

    @InjectMocks
    private RoomServiceImpl roomService;

    @Mock
    private RoomRepository roomRepository; // जर तुझ्या impl मध्ये वापरलं असेल तर

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetAllRooms() {
        RoomResponseDTO r1 = new RoomResponseDTO();
        r1.setRoomId(1L);
        r1.setRoomType("Deluxe");
        r1.setPricePerNight(5000.0);
        r1.setAvailability(true);
        r1.setHotelId(1L);

        RoomResponseDTO r2 = new RoomResponseDTO();
        r2.setRoomId(2L);
        r2.setRoomType("Suite");
        r2.setPricePerNight(10000.0);
        r2.setAvailability(false);
        r2.setHotelId(1L);

        List<RoomResponseDTO> rooms = Arrays.asList(r1, r2);

        when(roomService.getAllRooms()).thenReturn(rooms);

        List<RoomResponseDTO> result = roomService.getAllRooms();
        assertEquals(2, result.size());
    }

    @Test
    void testGetRoomById() {
        RoomResponseDTO r = new RoomResponseDTO();
        r.setRoomId(1L);
        r.setRoomType("Deluxe");
        r.setPricePerNight(5000.0);
        r.setAvailability(true);
        r.setHotelId(1L);

        when(roomService.getRoomById(1L)).thenReturn(r);

        RoomResponseDTO result = roomService.getRoomById(1L);
        assertEquals("Deluxe", result.getRoomType());
    }

    @Test
    void testCreateRoom() {
        RoomRequestDTO req = new RoomRequestDTO();
        req.setRoomType("Deluxe");
        req.setPricePerNight(5000.0);
        req.setAvailability(true);
        req.setHotelId(1L);

        RoomResponseDTO res = new RoomResponseDTO();
        res.setRoomId(1L);
        res.setRoomType("Deluxe");
        res.setPricePerNight(5000.0);
        res.setAvailability(true);
        res.setHotelId(1L);

        when(roomService.createRoom(any(RoomRequestDTO.class))).thenReturn(res);

        RoomResponseDTO result = roomService.createRoom(req);
        assertEquals("Deluxe", result.getRoomType());
    }

    @Test
    void testUpdateRoom() {
        RoomRequestDTO req = new RoomRequestDTO();
        req.setRoomType("Suite");
        req.setPricePerNight(8000.0);
        req.setAvailability(true);
        req.setHotelId(1L);

        RoomResponseDTO res = new RoomResponseDTO();
        res.setRoomId(1L);
        res.setRoomType("Suite");
        res.setPricePerNight(8000.0);
        res.setAvailability(true);
        res.setHotelId(1L);

        when(roomService.updateRoom(eq(1L), any(RoomRequestDTO.class))).thenReturn(res);

        RoomResponseDTO result = roomService.updateRoom(1L, req);
        assertEquals("Suite", result.getRoomType());
    }

    @Test
    void testDeleteRoom() {
        roomService.deleteRoom(1L);
    }
}





